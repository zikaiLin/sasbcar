// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Basis_Expansion
Rcpp::List Basis_Expansion(arma::vec y, arma::mat X, double initial_alpha, double initial_a, arma::vec initial_delta, arma::vec initial_z, arma::mat initial_theta, arma::mat initial_prob_mat, arma::uvec excluded_vox, int poly_degree, double poly_a, double poly_b, arma::uvec radius_candidats, arma::umat partition, bool oc_theta, bool oc_alpha, bool oc_delta, bool oc_z, bool oc_sigma, bool oc_a, double initial_sigma_sq, double threshold, double prior_max, double prior_min, int mcmc_sample, int burnin, int thinning, int radius_update_thinning, int max_iter, int verbose, int save_profile);
RcppExport SEXP _sasbcar_Basis_Expansion(SEXP ySEXP, SEXP XSEXP, SEXP initial_alphaSEXP, SEXP initial_aSEXP, SEXP initial_deltaSEXP, SEXP initial_zSEXP, SEXP initial_thetaSEXP, SEXP initial_prob_matSEXP, SEXP excluded_voxSEXP, SEXP poly_degreeSEXP, SEXP poly_aSEXP, SEXP poly_bSEXP, SEXP radius_candidatsSEXP, SEXP partitionSEXP, SEXP oc_thetaSEXP, SEXP oc_alphaSEXP, SEXP oc_deltaSEXP, SEXP oc_zSEXP, SEXP oc_sigmaSEXP, SEXP oc_aSEXP, SEXP initial_sigma_sqSEXP, SEXP thresholdSEXP, SEXP prior_maxSEXP, SEXP prior_minSEXP, SEXP mcmc_sampleSEXP, SEXP burninSEXP, SEXP thinningSEXP, SEXP radius_update_thinningSEXP, SEXP max_iterSEXP, SEXP verboseSEXP, SEXP save_profileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type initial_alpha(initial_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type initial_a(initial_aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial_delta(initial_deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initial_z(initial_zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_theta(initial_thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_prob_mat(initial_prob_matSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type excluded_vox(excluded_voxSEXP);
    Rcpp::traits::input_parameter< int >::type poly_degree(poly_degreeSEXP);
    Rcpp::traits::input_parameter< double >::type poly_a(poly_aSEXP);
    Rcpp::traits::input_parameter< double >::type poly_b(poly_bSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type radius_candidats(radius_candidatsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< bool >::type oc_theta(oc_thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type oc_alpha(oc_alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type oc_delta(oc_deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type oc_z(oc_zSEXP);
    Rcpp::traits::input_parameter< bool >::type oc_sigma(oc_sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type oc_a(oc_aSEXP);
    Rcpp::traits::input_parameter< double >::type initial_sigma_sq(initial_sigma_sqSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type prior_max(prior_maxSEXP);
    Rcpp::traits::input_parameter< double >::type prior_min(prior_minSEXP);
    Rcpp::traits::input_parameter< int >::type mcmc_sample(mcmc_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thinning(thinningSEXP);
    Rcpp::traits::input_parameter< int >::type radius_update_thinning(radius_update_thinningSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type save_profile(save_profileSEXP);
    rcpp_result_gen = Rcpp::wrap(Basis_Expansion(y, X, initial_alpha, initial_a, initial_delta, initial_z, initial_theta, initial_prob_mat, excluded_vox, poly_degree, poly_a, poly_b, radius_candidats, partition, oc_theta, oc_alpha, oc_delta, oc_z, oc_sigma, oc_a, initial_sigma_sq, threshold, prior_max, prior_min, mcmc_sample, burnin, thinning, radius_update_thinning, max_iter, verbose, save_profile));
    return rcpp_result_gen;
END_RCPP
}
// update_pj_mat
NumericMatrix update_pj_mat(IntegerMatrix delta_mat, IntegerMatrix partition, IntegerVector radius_partition);
RcppExport SEXP _sasbcar_update_pj_mat(SEXP delta_matSEXP, SEXP partitionSEXP, SEXP radius_partitionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type delta_mat(delta_matSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type partition(partitionSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type radius_partition(radius_partitionSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pj_mat(delta_mat, partition, radius_partition));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sasbcar_Basis_Expansion", (DL_FUNC) &_sasbcar_Basis_Expansion, 31},
    {"_sasbcar_update_pj_mat", (DL_FUNC) &_sasbcar_update_pj_mat, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_sasbcar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
